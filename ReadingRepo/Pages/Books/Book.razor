@using Microsoft.EntityFrameworkCore;
@using ReadingRepo.DAL.Entities;
@inject IDbContextFactory<ReadingRepoContext> DbFactory;

<h3>Book</h3>

@if (book == null)
{
    <p>No book found in DB with ID '@BookId'</p>
}
else
{
    <p>Title: @book.Title</p>
    <p>Publish Date: @book.PublishDate.Date</p>
    <p>Pages: @book.Pages</p>
    <p>ISBN: @(book.Isbn ?? "none")</p>
    <p>OpenLibrary ID: @(book.OpenLibraryId ?? "none")</p>
    <p>Authors:</p>
    <ul>
        @foreach (var author in book.Authors)
        {
            <li>@author.FirstName @author.LastName</li>
        }
    </ul>
}

@code {
    [Parameter]
    public Guid? BookId { get; set; }

    private ReadingRepo.DAL.Entities.Book book;

    protected override async Task OnInitializedAsync()
    {
        await GetBook();
    }

    private async Task GetBook()
    {
        using var ctx = DbFactory.CreateDbContext();
        book = await ctx.Books
        .Where(x => x.BookId.Equals(BookId))
        .Include(e => e.Authors)
        .FirstOrDefaultAsync();
    }
}
