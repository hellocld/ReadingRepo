// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadingRepo.DAL.Entities;

#nullable disable

namespace ReadingRepo.DAL.Migrations
{
    [DbContext(typeof(ReadingRepoContext))]
    [Migration("20230626201208_Relations")]
    partial class Relations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("AuthorGroupBook", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorGroupsGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorGroupsAuthorId")
                        .HasColumnType("TEXT");

                    b.HasKey("BooksId", "AuthorGroupsGroupId", "AuthorGroupsAuthorId");

                    b.HasIndex("AuthorGroupsGroupId", "AuthorGroupsAuthorId");

                    b.ToTable("AuthorGroupBook");
                });

            modelBuilder.Entity("ReadingRepo.DAL.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bc7e5d0-62b4-4e2f-98cd-2bb99a13f19b"),
                            FirstName = "Groucho",
                            LastName = "Marx"
                        },
                        new
                        {
                            Id = new Guid("982bb77d-8041-491c-b3f3-baef19729c79"),
                            FirstName = "Harpo",
                            LastName = "Marx"
                        });
                });

            modelBuilder.Entity("ReadingRepo.DAL.Entities.AuthorGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorGroups");

                    b.HasData(
                        new
                        {
                            GroupId = new Guid("b0b463fd-a805-43da-82f6-7d30353c8e74"),
                            AuthorId = new Guid("4bc7e5d0-62b4-4e2f-98cd-2bb99a13f19b")
                        },
                        new
                        {
                            GroupId = new Guid("b0b463fd-a805-43da-82f6-7d30353c8e74"),
                            AuthorId = new Guid("982bb77d-8041-491c-b3f3-baef19729c79")
                        });
                });

            modelBuilder.Entity("ReadingRepo.DAL.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorGroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImageUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("Isbn")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenLibraryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72e54d7d-20a7-4a7a-8795-df77c6f48fee"),
                            AuthorGroupId = new Guid("b0b463fd-a805-43da-82f6-7d30353c8e74"),
                            Pages = 0,
                            PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Hail Freedonia"
                        });
                });

            modelBuilder.Entity("ReadingRepo.DAL.Entities.ReadingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ReadingLogs");
                });

            modelBuilder.Entity("AuthorGroupBook", b =>
                {
                    b.HasOne("ReadingRepo.DAL.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingRepo.DAL.Entities.AuthorGroup", null)
                        .WithMany()
                        .HasForeignKey("AuthorGroupsGroupId", "AuthorGroupsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReadingRepo.DAL.Entities.AuthorGroup", b =>
                {
                    b.HasOne("ReadingRepo.DAL.Entities.Author", "Author")
                        .WithMany("AuthorGroups")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ReadingRepo.DAL.Entities.Author", b =>
                {
                    b.Navigation("AuthorGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
